[algine::Object]
include     algine/core/scene/Scene.h
include     algine/core/Window.h

# algine/core/io

[void algine::IOProvider::setIOSystem(const std::shared_ptr<algine::IOSystem> &)]
prop_name   ioSystem

[const std::shared_ptr<algine::IOSystem> &algine::IOProvider::getIOSystem() const]
prop_name   ioSystem

# algine/core/log

[algine::Logger algine::Log::info(const std::basic_string<char> &)]
ignore

[algine::Logger algine::Log::error(const std::basic_string<char> &)]
ignore

# algine/core/lua

[void algine::Scriptable::setRootDir(std::basic_string_view<char>)]
prop_name   rootDir

[const std::basic_string<char> &algine::Scriptable::getRootDir() const]
prop_name   rootDir

[void algine::Scriptable::execute(const std::basic_string<char> &, algine::Lua *, sol::basic_table_core<true, sol::basic_reference<false>> *)]
impl    [userdata](algine::Scriptable &self, const std::string &p, sol::this_environment tenv) { sol::global_table env = *tenv.env; self.execute(p, (algine::Lua*) userdata, &env); }

[void algine::Scriptable::executeString(const std::basic_string<char> &, algine::Lua *, sol::basic_table_core<true, sol::basic_reference<false>> *)]
impl    [userdata](algine::Scriptable &self, const std::string &s, sol::this_environment tenv) { sol::global_table env = *tenv.env; self.executeString(s, (algine::Lua*) userdata, &env); }

# algine/core/painter

[algine::Paint]
include     algine/core/texture/Texture2D.h

# algine/core/shader

[algine::ShaderDefinitionGenerator]
dep         algine::ShaderDefinitionGenerator::Definition

# algine/core/texture

[algine::Texture2D]
factory     new $TYPE($ANAMES)
include     memory

[algine::TextureCube]
factory     new $TYPE($ANAMES)
include     memory

[algine::Texture2DBuilder]
include     algine/core/texture/Texture2D.h

[void algine::Texture2DBuilder::setPath(std::basic_string_view<char>)]
prop_name   path

[const std::basic_string<char> &algine::Texture2DBuilder::getPath() const]
prop_name   path

[void algine::Texture::setLOD(unsigned int)]
prop_name   lod

[unsigned int algine::Texture::getLOD() const]
prop_name   lod

# algine/core

[algine::Framebuffer]
factory     new $TYPE($ANAMES)
include     memory

[algine::Renderbuffer]
factory     new $TYPE($ANAMES)
include     memory

[algine::RenderbufferBuilder]
include     algine/core/Renderbuffer.h

[algine::FramebufferBuilder]
include     algine/core/Framebuffer.h
dep         algine::FramebufferBuilder::RenderbufferAttachments
dep         algine::FramebufferBuilder::Texture2DAttachments
dep         algine::FramebufferBuilder::TextureCubeAttachments

[algine::Color]
explicit_cast

# algine/core/widgets

[algine::Widget]
ignoreName  findProperty
ignoreName  propertiesEnd
ignoreName  setEventListener
ignoreName  setEventAnimation
ignoreName  hasAnimation
ignoreName  getAnimation
ignoreName  addAnimation
ignoreName  getAnimations
ignoreName  event
include     algine/core/Framebuffer.h
include     algine/core/painter/Painter.h
include     pugixml.hpp
explicit_cast

# algine/std/model

[algine::ShapeBuilder]
dep         algine::ShapeBuilder::BufferData<float>
dep         algine::ShapeBuilder::BufferData<uint>

[void algine::ShapeBuilder::setAMTL(const algine::AMTLManager &)]
prop_name   amtl

[const algine::AMTLManager &algine::ShapeBuilder::getAMTL() const]
prop_name   amtl

[algine::Model]
factory     new $TYPE($ANAMES)
include     memory
include     algine/std/model/Shape.h

[algine::Shape]
factory     new $TYPE($ANAMES)
include     memory

[const std::set<algine::ModelBuilder::AnimationInfo> &algine::ModelBuilder::getActivatedAnimations() const]
ignore

# algine/std

[algine::AMTLMaterialManager]
include     algine/core/texture/Texture2D.h
