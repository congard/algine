# algine/core/io

[void algine::IOProvider::setIOSystem(const std::shared_ptr<algine::IOSystem> &)]
prop_name   ioSystem

[const std::shared_ptr<algine::IOSystem> &algine::IOProvider::getIOSystem() const]
prop_name   ioSystem

# algine/core/log

[algine::Logger algine::Log::info(const std::basic_string<char> &)]
ignore

[algine::Logger algine::Log::error(const std::basic_string<char> &)]
ignore

# algine/core/lua

[void algine::Scriptable::setRootDir(std::basic_string_view<char>)]
prop_name   rootDir

[const std::basic_string<char> &algine::Scriptable::getRootDir() const]
prop_name   rootDir

[void algine::Scriptable::execute(const std::basic_string<char> &, algine::Lua *, sol::basic_table_core<true, sol::basic_reference<false>> *)]
impl    [userdata](algine::Scriptable &self, const std::string &p, sol::this_environment tenv) { sol::global_table env = *tenv.env; self.execute(p, (algine::Lua*) userdata, &env); }

[void algine::Scriptable::executeString(const std::basic_string<char> &, algine::Lua *, sol::basic_table_core<true, sol::basic_reference<false>> *)]
impl    [userdata](algine::Scriptable &self, const std::string &s, sol::this_environment tenv) { sol::global_table env = *tenv.env; self.executeString(s, (algine::Lua*) userdata, &env); }

# algine/core/painter

[algine::Paint]
include     algine/core/texture/Texture2D.h

[void algine::Painter::drawTexture(algine::AutoRawPtr<Texture2D>, const algine::Rect<float> &)]
impl        [](algine::Painter &self, algine::AutoRawPtr<Texture2D> tex, const algine::RectF &r) { self.drawTexture(tex, r); }

[void algine::Painter::drawTexture(algine::AutoRawPtr<Texture2D>, const algine::Point<float> &)]
impl        [](algine::Painter &self, algine::AutoRawPtr<Texture2D> tex, const algine::PointF &p) { self.drawTexture(tex, p); }

[void algine::Painter::drawTexture(algine::AutoRawPtr<Texture2D>, float, float)]
impl        [](algine::Painter &self, algine::AutoRawPtr<Texture2D> tex, float x, float y) { self.drawTexture(tex, x, y); }

# algine/core/shader

[std::vector<std::shared_ptr<algine::Shader>> algine::Shader::publicObjects]
ignore

[std::vector<std::shared_ptr<algine::ShaderProgram>> algine::ShaderProgram::publicObjects]
ignore

[algine::ShaderDefinitionGenerator]
dep         algine::ShaderDefinitionGenerator::Definition

# algine/core/texture

[algine::Texture2D]
factory     std::make_shared<$TYPE>($ANAMES)
include     memory

[std::vector<std::shared_ptr<algine::Texture2D>> algine::Texture2D::publicObjects]
ignore

[algine::TextureCube]
factory     std::make_shared<$TYPE>($ANAMES)
include     memory

[std::vector<std::shared_ptr<algine::TextureCube>> algine::TextureCube::publicObjects]
ignore

[algine::Texture2DCreator]
include     algine/core/texture/Texture2D.h

[void algine::Texture2DCreator::setPath(std::basic_string_view<char>)]
prop_name   path

[const std::basic_string<char> &algine::Texture2DCreator::getPath() const]
prop_name   path

[void algine::Texture::setLOD(unsigned int)]
prop_name   lod

[unsigned int algine::Texture::getLOD() const]
prop_name   lod

# algine/core

[algine::Framebuffer]
factory     std::make_shared<$TYPE>($ANAMES)
include     memory

[std::vector<std::shared_ptr<algine::Framebuffer>> algine::Framebuffer::publicObjects]
ignore

[algine::Renderbuffer]
factory     std::make_shared<$TYPE>($ANAMES)
include     memory

[std::vector<std::shared_ptr<algine::Renderbuffer>> algine::Renderbuffer::publicObjects]
ignore

[algine::RenderbufferCreator]
include     algine/core/Renderbuffer.h

[algine::FramebufferCreator]
include     algine/core/Framebuffer.h
dep         algine::FramebufferCreator::RenderbufferAttachments
dep         algine::FramebufferCreator::Texture2DAttachments
dep         algine::FramebufferCreator::TextureCubeAttachments

[algine::Color]
explicit_cast

# algine/core/widgets

[algine::Widget]
include     algine/core/Framebuffer.h
include     algine/core/painter/Painter.h
include     pugixml.hpp
explicit_cast

# algine/std/model

[std::vector<std::shared_ptr<algine::Shape>> algine::Shape::publicObjects]
ignore

[algine::ShapeCreator]
dep         algine::ShapeCreator::BufferData<float>
dep         algine::ShapeCreator::BufferData<uint>

[void algine::ShapeCreator::setAMTL(const algine::AMTLManager &)]
prop_name   amtl

[const algine::AMTLManager &algine::ShapeCreator::getAMTL() const]
prop_name   amtl

[algine::Model]
factory     std::make_shared<$TYPE>($ANAMES)
include     memory
include     algine/std/model/Shape.h

[algine::Shape]
factory     std::make_shared<$TYPE>($ANAMES)
include     memory

[const std::set<algine::ModelCreator::AnimationInfo> &algine::ModelCreator::getActivatedAnimations() const]
ignore

[std::vector<std::shared_ptr<algine::Model>> algine::Model::publicObjects]
ignore

# algine/std

[algine::AMTLMaterialManager]
include     algine/core/texture/Texture2D.h
